import os
import json
import openai
from dotenv import load_dotenv
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type
from faq_data import FAQ_LIST, FUNCTION_DEFINITIONS, AVAILABLE_FUNCTIONS

# Load environment variables from .env file
load_dotenv()

# Configuration from environment variables
OPENAI_BASE_URL = os.getenv("OPENAI_BASE_URL", "https://aiportalapi.stu-platform.live/jpe")
MODEL = os.getenv("MODEL_NAME", "GPT-4o-mini")
MAX_TOKENS = int(os.getenv("MAX_TOKENS", "200"))
TEMPERATURE = float(os.getenv("TEMPERATURE", "0.5"))

# Retry configuration
RETRY_ATTEMPTS = int(os.getenv("RETRY_ATTEMPTS", "3"))
RETRY_WAIT_MIN = int(os.getenv("RETRY_WAIT_MIN", "1"))
RETRY_WAIT_MAX = int(os.getenv("RETRY_WAIT_MAX", "10"))

client = openai.OpenAI(
    base_url=OPENAI_BASE_URL,
    api_key=os.getenv("OPENAI_API_KEY")
)

# Build the system prompt for function calling
def build_system_prompt():
    prompt = """B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh, ƒë√°ng tin c·∫≠y v√† l·ªãch s·ª±, chuy√™n tr·∫£ l·ªùi c√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p (FAQ) v·ªÅ xe h∆°i.

Nhi·ªám v·ª• c·ªßa b·∫°n:
1. ƒê·ªçc k·ªπ c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
2. Suy lu·∫≠n ƒë·ªÉ x√°c ƒë·ªãnh xem c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn c√°c m·ª•c trong danh s√°ch FAQ kh√¥ng.
3. N·∫øu c√≥, ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ph√π h·ª£p nh·∫•t d·ª±a tr√™n n·ªôi dung FAQ.
4. N·∫øu kh√¥ng c√≥ c√¢u h·ªèi n√†o ph√π h·ª£p, h√£y l·ªãch s·ª± tr·∫£ l·ªùi r·∫±ng b·∫°n kh√¥ng bi·∫øt.

B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c ch·ª©c nƒÉng sau ƒë·ªÉ h·ªó tr·ª£ ng∆∞·ªùi d√πng:
- T√¨m ki·∫øm th√¥ng tin trong c∆° s·ªü d·ªØ li·ªáu FAQ
- ƒê∆∞a ra g·ª£i √Ω xe h∆°i d·ª±a tr√™n lo·∫°i xe
- Cung c·∫•p th√¥ng tin v·ªÅ l·ªãch b·∫£o d∆∞·ª°ng
- ƒê∆∞a ra c√°c m·∫πo ti·∫øt ki·ªám nhi√™n li·ªáu

---

V√≠ d·ª• minh h·ªça:

üî∏ V√≠ d·ª• 1:
Ng∆∞·ªùi d√πng: Xe ƒëi·ªán c√≥ ph·∫£i l√† t∆∞∆°ng lai kh√¥ng?
Suy lu·∫≠n:
- C√¢u h·ªèi li√™n quan ƒë·∫øn xu h∆∞·ªõng ph√°t tri·ªÉn ng√†nh √¥ t√¥.
- T√¨m th·∫•y FAQ: "Xe ƒëi·ªán (EV) c√≥ th·ª±c s·ª± l√† t∆∞∆°ng lai c·ªßa ng√†nh √¥ t√¥ kh√¥ng?"
Tr·∫£ l·ªùi: Xe ƒëi·ªán ƒë∆∞·ª£c coi l√† m·ªôt ph·∫ßn quan tr·ªçng c·ªßa t∆∞∆°ng lai ng√†nh √¥ t√¥ do gi·∫£m ph√°t th·∫£i v√† chi ph√≠ v·∫≠n h√†nh th·∫•p h∆°n...

üî∏ V√≠ d·ª• 2:
Ng∆∞·ªùi d√πng: T√¥i n√™n ch·ªçn xe s·ªë s√†n hay xe s·ªë t·ª± ƒë·ªông?
Suy lu·∫≠n:
- C√¢u h·ªèi li√™n quan ƒë·∫øn vi·ªác l·ª±a ch·ªçn gi·ªØa hai lo·∫°i h·ªôp s·ªë.
- T√¨m th·∫•y FAQ: "S·ª± kh√°c bi·ªát gi·ªØa xe s·ªë s√†n v√† xe s·ªë t·ª± ƒë·ªông l√† g√¨?"
Tr·∫£ l·ªùi: Xe s·ªë s√†n y√™u c·∫ßu ng∆∞·ªùi l√°i ph·∫£i t·ª± ƒëi·ªÅu khi·ªÉn c√¥n v√† sang s·ªë... L·ª±a ch·ªçn t√πy thu·ªôc v√†o th√≥i quen l√°i xe v√† m√¥i tr∆∞·ªùng di chuy·ªÉn...

üî∏ V√≠ d·ª• 3:
Ng∆∞·ªùi d√πng: T√¥i n√™n ƒÉn g√¨ ƒë·ªÉ gi·∫£m c√¢n?
Suy lu·∫≠n:
- C√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn lƒ©nh v·ª±c √¥ t√¥.
Tr·∫£ l·ªùi: Xin l·ªói, t√¥i kh√¥ng c√≥ th√¥ng tin v·ªÅ c√¢u h·ªèi n√†y v√¨ n√≥ n·∫±m ngo√†i ph·∫°m vi c√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p v·ªÅ √¥ t√¥.

H√£y s·ª≠ d·ª•ng c√°c ch·ª©c nƒÉng c√≥ s·∫µn ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch ch√≠nh x√°c v√† h·ªØu √≠ch."""
    return prompt

def execute_function_call(function_name, arguments):
    """Execute the function call and return the result"""
    if function_name in AVAILABLE_FUNCTIONS:
        function = AVAILABLE_FUNCTIONS[function_name]
        try:
            if arguments:
                result = function(**arguments)
            else:
                result = function()
            return json.dumps(result, ensure_ascii=False)
        except Exception as e:
            return json.dumps({"error": f"L·ªói khi th·ª±c thi function: {str(e)}"}, ensure_ascii=False)
    else:
        return json.dumps({"error": "Function kh√¥ng t·ªìn t·∫°i"}, ensure_ascii=False)

@retry(
    stop=stop_after_attempt(RETRY_ATTEMPTS),
    wait=wait_exponential(multiplier=1, min=RETRY_WAIT_MIN, max=RETRY_WAIT_MAX),
    retry=retry_if_exception_type((openai.APIError, openai.RateLimitError, openai.APITimeoutError, ConnectionError)),
    reraise=True
)
def call_openai_with_retry(messages, functions=None, function_call=None):
    """Call OpenAI API with retry mechanism"""
    try:
        if functions:
            response = client.chat.completions.create(
                model=MODEL,
                messages=messages,
                functions=functions,
                function_call=function_call or "auto",
                max_tokens=MAX_TOKENS,
                temperature=TEMPERATURE
            )
        else:
            response = client.chat.completions.create(
                model=MODEL,
                messages=messages,
                max_tokens=MAX_TOKENS,
                temperature=TEMPERATURE
            )
        return response
    except Exception as e:
        print(f"‚ö†Ô∏è API call failed: {str(e)}")
        raise

def get_faq_answer_with_functions(user_question):
    """Get FAQ answer using function calling capabilities with retry mechanism"""
    system_prompt = build_system_prompt()
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_question}
    ]
    
    try:
        # First API call with function definitions
        print("üîÑ Calling OpenAI API...")
        response = call_openai_with_retry(
            messages=messages,
            functions=FUNCTION_DEFINITIONS,
            function_call="auto"
        )
        
        message = response.choices[0].message
        
        # Check if the model wants to call a function
        if message.function_call:
            function_name = message.function_call.name
            function_args = json.loads(message.function_call.arguments)
            
            print(f"üîß Executing function: {function_name} with args: {function_args}")
            
            # Execute the function
            function_result = execute_function_call(function_name, function_args)
            
            # Add the function call and result to the conversation
            messages.append({
                "role": "assistant",
                "content": None,
                "function_call": {
                    "name": function_name,
                    "arguments": message.function_call.arguments
                }
            })
            messages.append({
                "role": "function",
                "name": function_name,
                "content": function_result
            })
            
            # Second API call to get the final response
            print("üîÑ Getting final response...")
            final_response = call_openai_with_retry(messages=messages)
            
            return final_response.choices[0].message.content.strip()
        else:
            # No function call needed, return the direct response
            return message.content.strip()
            
    except Exception as e:
        error_msg = f"‚ùå ƒê√£ x·∫£y ra l·ªói sau {RETRY_ATTEMPTS} l·∫ßn th·ª≠: {str(e)}"
        print(error_msg)
        return f"Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau. ({str(e)})"

# Keep the original function for backward compatibility
def get_faq_answer(user_question):
    """Original FAQ function without function calling (for backward compatibility) with retry"""
    system_prompt = """B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh, ƒë√°ng tin c·∫≠y v√† l·ªãch s·ª±, chuy√™n tr·∫£ l·ªùi c√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p (FAQ) v·ªÅ xe h∆°i.

Nhi·ªám v·ª• c·ªßa b·∫°n:
1. ƒê·ªçc k·ªπ c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.
2. Suy lu·∫≠n ƒë·ªÉ x√°c ƒë·ªãnh xem c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn c√°c m·ª•c trong danh s√°ch FAQ kh√¥ng.
3. N·∫øu c√≥, ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ph√π h·ª£p nh·∫•t d·ª±a tr√™n n·ªôi dung FAQ.
4. N·∫øu kh√¥ng c√≥ c√¢u h·ªèi n√†o ph√π h·ª£p, h√£y l·ªãch s·ª± tr·∫£ l·ªùi r·∫±ng b·∫°n kh√¥ng bi·∫øt.

---

V√≠ d·ª• minh h·ªça:

üî∏ V√≠ d·ª• 1:
Ng∆∞·ªùi d√πng: Xe ƒëi·ªán c√≥ ph·∫£i l√† t∆∞∆°ng lai kh√¥ng?
Suy lu·∫≠n:
- C√¢u h·ªèi li√™n quan ƒë·∫øn xu h∆∞·ªõng ph√°t tri·ªÉn ng√†nh √¥ t√¥.
- T√¨m th·∫•y FAQ: "Xe ƒëi·ªán (EV) c√≥ th·ª±c s·ª± l√† t∆∞∆°ng lai c·ªßa ng√†nh √¥ t√¥ kh√¥ng?"
Tr·∫£ l·ªùi: Xe ƒëi·ªán ƒë∆∞·ª£c coi l√† m·ªôt ph·∫ßn quan tr·ªçng c·ªßa t∆∞∆°ng lai ng√†nh √¥ t√¥ do gi·∫£m ph√°t th·∫£i v√† chi ph√≠ v·∫≠n h√†nh th·∫•p h∆°n...

üî∏ V√≠ d·ª• 2:
Ng∆∞·ªùi d√πng: T√¥i n√™n ch·ªçn xe s·ªë s√†n hay xe s·ªë t·ª± ƒë·ªông?
Suy lu·∫≠n:
- C√¢u h·ªèi li√™n quan ƒë·∫øn vi·ªác l·ª±a ch·ªçn gi·ªØa hai lo·∫°i h·ªôp s·ªë.
- T√¨m th·∫•y FAQ: "S·ª± kh√°c bi·ªát gi·ªØa xe s·ªë s√†n v√† xe s·ªë t·ª± ƒë·ªông l√† g√¨?"
Tr·∫£ l·ªùi: Xe s·ªë s√†n y√™u c·∫ßu ng∆∞·ªùi l√°i ph·∫£i t·ª± ƒëi·ªÅu khi·ªÉn c√¥n v√† sang s·ªë... L·ª±a ch·ªçn t√πy thu·ªôc v√†o th√≥i quen l√°i xe v√† m√¥i tr∆∞·ªùng di chuy·ªÉn...

üî∏ V√≠ d·ª• 3:
Ng∆∞·ªùi d√πng: T√¥i n√™n ƒÉn g√¨ ƒë·ªÉ gi·∫£m c√¢n?
Suy lu·∫≠n:
- C√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn lƒ©nh v·ª±c √¥ t√¥.
Tr·∫£ l·ªùi: Xin l·ªói, t√¥i kh√¥ng c√≥ th√¥ng tin v·ªÅ c√¢u h·ªèi n√†y v√¨ n√≥ n·∫±m ngo√†i ph·∫°m vi c√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p v·ªÅ √¥ t√¥.

---

FAQs:\n"""
    
    for faq in FAQ_LIST:
        system_prompt += f"Q: {faq['question']}\nA: {faq['answer']}\n"
    system_prompt += "\nH√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch ch√≠nh x√°c v√† h·ªØu √≠ch d·ª±a tr√™n c√°c FAQ tr√™n."
    
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_question}
    ]
    
    try:
        print("üîÑ Calling OpenAI API (traditional mode)...")
        response = call_openai_with_retry(messages=messages)
        return response.choices[0].message.content.strip()
    except Exception as e:
        error_msg = f"‚ùå ƒê√£ x·∫£y ra l·ªói sau {RETRY_ATTEMPTS} l·∫ßn th·ª≠: {str(e)}"
        print(error_msg)
        return f"Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau. ({str(e)})"
