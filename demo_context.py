#!/usr/bin/env python3
"""
Demo: Context Management and Multi-turn Conversations
This script demonstrates the difference between context-aware and context-unaware conversations
"""

from context_manager import get_contextual_response, reset_conversation, get_conversation_info
from faq_bot import get_faq_answer_with_functions

def demo_without_context():
    """Demonstrate conversation WITHOUT context management"""
    print("=" * 80)
    print("üö´ DEMO: WITHOUT Context Management (Current Implementation)")
    print("=" * 80)
    
    questions = [
        "G·ª£i √Ω xe SUV cho t√¥i",
        "Honda CR-V c√≥ ∆∞u ƒëi·ªÉm g√¨?",  # Should understand this refers to previous response
        "Gi√° c·ªßa n√≥ nh∆∞ th·∫ø n√†o?",    # "n√≥" refers to Honda CR-V
        "So v·ªõi Toyota RAV4 th√¨ sao?" # Should remember RAV4 was also mentioned
    ]
    
    print("\nüë§ Cu·ªôc tr√≤ chuy·ªán b·∫Øt ƒë·∫ßu...\n")
    
    for i, question in enumerate(questions, 1):
        print(f"üë§ User: {question}")
        response = get_faq_answer_with_functions(question)
        print(f"ü§ñ Bot: {response}")
        print(f"üìù Context: M·ªói c√¢u h·ªèi ƒë∆∞·ª£c x·ª≠ l√Ω ƒë·ªôc l·∫≠p - bot kh√¥ng nh·ªõ g√¨!")
        print("-" * 60)

def demo_with_context():
    """Demonstrate conversation WITH context management"""
    print("\n" + "=" * 80)
    print("‚úÖ DEMO: WITH Context Management (New Implementation)")
    print("=" * 80)
    
    # Reset conversation for clean demo
    reset_conversation()
    
    questions = [
        "G·ª£i √Ω xe SUV cho t√¥i",
        "Honda CR-V c√≥ ∆∞u ƒëi·ªÉm g√¨?",  # Should understand this refers to previous response
        "Gi√° c·ªßa n√≥ nh∆∞ th·∫ø n√†o?",    # "n√≥" refers to Honda CR-V
        "So v·ªõi Toyota RAV4 th√¨ sao?" # Should remember RAV4 was also mentioned
    ]
    
    print("\nüë§ Cu·ªôc tr√≤ chuy·ªán b·∫Øt ƒë·∫ßu...\n")
    
    for i, question in enumerate(questions, 1):
        print(f"üë§ User: {question}")
        
        # Get response with context
        response = get_contextual_response(question)
        print(f"ü§ñ Bot: {response}")
        
        # Show context information
        context_info = get_conversation_info()
        print(f"üìù Context: {context_info['message_count']} tin nh·∫Øn, Topics: {context_info['last_topics']}")
        print(f"üí≠ Summary: {context_info['context_summary']}")
        print("-" * 60)

def demo_context_features():
    """Demonstrate specific context management features"""
    print("\n" + "=" * 80)
    print("üéØ DEMO: Context Management Features")
    print("=" * 80)
    
    reset_conversation()
    
    scenarios = [
        {
            "title": "1. Remembering Previous Recommendations",
            "conversation": [
                "G·ª£i √Ω xe sedan cho t√¥i",
                "Trong nh·ªØng xe n√†y, xe n√†o ti·∫øt ki·ªám nhi√™n li·ªáu nh·∫•t?"
            ]
        },
        {
            "title": "2. Understanding References",
            "conversation": [
                "T√¥i quan t√¢m ƒë·∫øn Honda Civic",
                "N√≥ c√≥ ƒë·∫Øt kh√¥ng?",  # "N√≥" = Honda Civic
                "Khi n√†o t√¥i n√™n b·∫£o d∆∞·ª°ng n√≥?"  # Still talking about Honda Civic
            ]
        },
        {
            "title": "3. Maintaining Topic Flow",
            "conversation": [
                "Cho t√¥i m·∫πo ti·∫øt ki·ªám nhi√™n li·ªáu",
                "M·∫πo n√†o quan tr·ªçng nh·∫•t?",
                "C√≤n v·ªÅ √°p su·∫•t l·ªëp th√¨ sao?"
            ]
        }
    ]
    
    for scenario in scenarios:
        print(f"\n{scenario['title']}")
        print("-" * 40)
        reset_conversation()  # Start fresh for each scenario
        
        for question in scenario['conversation']:
            print(f"üë§ {question}")
            response = get_contextual_response(question)
            print(f"ü§ñ {response[:150]}...")  # Truncate for demo
            print()

def explain_step_by_step():
    """Explain how context management works step by step"""
    print("\n" + "=" * 80)
    print("üìö HOW CONTEXT MANAGEMENT WORKS - STEP BY STEP")
    print("=" * 80)
    
    steps = [
        {
            "step": "1. Message Storage",
            "explanation": "M·ªói tin nh·∫Øn (user v√† bot) ƒë∆∞·ª£c l∆∞u v·ªõi timestamp",
            "code": """
conversation_history = [
    {"role": "user", "content": "G·ª£i √Ω xe SUV", "timestamp": "2025-06-28T10:00:00"},
    {"role": "assistant", "content": "Honda CR-V, Toyota RAV4...", "timestamp": "2025-06-28T10:00:05"}
]"""
        },
        {
            "step": "2. Context Building", 
            "explanation": "Khi c√≥ c√¢u h·ªèi m·ªõi, to√†n b·ªô l·ªãch s·ª≠ ƒë∆∞·ª£c g·ª≠i cho AI",
            "code": """
messages = [
    {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω √¥ t√¥, nh·ªõ cu·ªôc tr√≤ chuy·ªán..."},
    {"role": "user", "content": "G·ª£i √Ω xe SUV"},
    {"role": "assistant", "content": "Honda CR-V, Toyota RAV4..."},
    {"role": "user", "content": "Honda CR-V c√≥ ∆∞u ƒëi·ªÉm g√¨?"}  # C√¢u h·ªèi m·ªõi
]"""
        },
        {
            "step": "3. Reference Resolution",
            "explanation": "AI hi·ªÉu 'Honda CR-V' ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong c√¢u tr·∫£ l·ªùi tr∆∞·ªõc",
            "code": """
# AI nh·∫≠n ƒë∆∞·ª£c to√†n b·ªô context n√™n bi·∫øt:
# - Honda CR-V ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong response tr∆∞·ªõc
# - User ƒëang h·ªèi v·ªÅ xe ƒë√≥ c·ª• th·ªÉ
# - Kh√¥ng c·∫ßn t√¨m ki·∫øm l·∫°i danh s√°ch SUV"""
        },
        {
            "step": "4. Context Summary",
            "explanation": "T√≥m t·∫Øt ch·ªß ƒë·ªÅ ƒë·ªÉ qu·∫£n l√Ω token limit",
            "code": """
context_summary = "ƒê√£ t∆∞ v·∫•n xe SUV | Quan t√¢m Honda CR-V"
# Gi√∫p AI nh·ªõ nh·ªØng g√¨ quan tr·ªçng ngay c·∫£ khi conversation d√†i"""
        }
    ]
    
    for step_info in steps:
        print(f"\n{step_info['step']}: {step_info['explanation']}")
        print(f"```{step_info['code']}```")
        print()

if __name__ == "__main__":
    print("üé≠ CONTEXT MANAGEMENT & MULTI-TURN CONVERSATION DEMO")
    print("This demo shows the difference between context-aware and context-unaware chatbots")
    
    # Show explanations first
    explain_step_by_step()
    
    # Show demos
    demo_without_context()
    demo_with_context() 
    demo_context_features()
    
    print("\n" + "=" * 80)
    print("‚ú® SUMMARY")
    print("=" * 80)
    print("""
üö´ WITHOUT Context Management:
- M·ªói c√¢u h·ªèi ƒë·ªôc l·∫≠p
- Kh√¥ng hi·ªÉu references ("n√≥", "xe ƒë√≥")
- Kh√¥ng nh·ªõ ƒë√£ n√≥i g√¨ tr∆∞·ªõc ƒë√≥
- Tr·∫£i nghi·ªám nh∆∞ chat v·ªõi ng∆∞·ªùi l·∫° m·ªói l·∫ßn

‚úÖ WITH Context Management:
- Nh·ªõ to√†n b·ªô cu·ªôc tr√≤ chuy·ªán
- Hi·ªÉu references v√† pronouns
- Duy tr√¨ flow t·ª± nhi√™n
- Tr·∫£i nghi·ªám nh∆∞ n√≥i chuy·ªán v·ªõi m·ªôt ng∆∞·ªùi
    """)
    print("=" * 80)
